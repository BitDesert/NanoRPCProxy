{"version":3,"sources":["App.js","rpc.js","serviceWorker.js","index.js"],"names":["constants","RPC_SERVER","RPC_LIMIT","RPC_CREDS","SAMPLE_COMMANDS","SAMPLE_COMMAND_NAMES","RPCError","code","params","Error","captureStackTrace","name","App","props","state","command","output","fetchingRPC","activeCommandId","activeCommandName","getRPC","bind","handleCommandChange","handleRPCError","selectCommand","event","target","value","this","setState","eventKey","error","alert","console","log","message","JSON","parse","e","Object","keys","length","postData","then","data","writeOutput","catch","json","stringify","server","didTimeOut","Promise","resolve","reject","timeout","setTimeout","fetch","method","mode","cache","credentials","headers","Base64","encode","redirect","referrerPolicy","body","response","clearTimeout","status","err","result","a","className","href","DropdownButton","title","key","id","map","index","Dropdown","Item","onSelect","InputGroup","size","Prepend","Text","FormControl","aria-describedby","maxLength","placeholder","onChange","autoComplete","Button","variant","disabled","onClick","as","rows","readOnly","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0b15f91.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport * as rpc from './rpc' //rpc creds not shared on github\nimport { Base64 } from 'js-base64';\nimport { Dropdown, DropdownButton, InputGroup, FormControl, Button} from 'react-bootstrap'\n\nconst RPC_TIMEOUT = 10000 // 10sec timeout for calling RPC proxy\n\n//CONSTANTS\nexport const constants = {\n  // These are taken from the creds file\n  RPC_SERVER: rpc.RPC_SERVER,\n  RPC_LIMIT: rpc.RPC_LIMIT,\n  RPC_CREDS: rpc.RPC_CREDS,\n  // Nano sample commands\n  SAMPLE_COMMANDS: [\n    '{\"action\":\"block_count\"}',\n    '{\"action\":\"account_info\",\"account\":\"nano_3t6k35gi95xu6tergt6p69ck76ogmitsa8mnijtpxm9fkcm736xtoncuohr3\"}',\n    '{\"action\":\"account_history\", \"account\":\"nano_3cpz7oh9qr5b7obbcb5867omqf8esix4sdd5w6mh8kkknamjgbnwrimxsaaf\", \"count\":\"20\"}',\n    '{\"action\":\"active_difficulty\"}',\n    '{\"action\":\"block_info\",\"json_block\":\"true\",\"hash\":\"87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\"}',\n    '{\"action\":\"pending\",\"account\":\"nano_1111111111111111111111111111111111111111111111111117353trpda\",\"count\": \"5\"}',\n    '{\"action\":\"representatives_online\"}',\n  ],\n  // For dropdown titles\n  SAMPLE_COMMAND_NAMES: [\n    'block_count',\n    'account_info',\n    'account_history',\n    'active_difficulty',\n    'block_info',\n    'pending',\n    'representatives_online',\n  ]\n}\n\n// Custom error class\nclass RPCError extends Error {\n  constructor(code, ...params) {\n    super(...params)\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, RPCError)\n    }\n    this.name = 'RPCError'\n    // Custom debugging information\n    this.code = code\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      command: '',\n      output: '',\n      fetchingRPC: false,\n      activeCommandId: 0,\n      activeCommandName: 'Select a sample',\n    }\n\n    this.getRPC = this.getRPC.bind(this)\n    this.handleCommandChange = this.handleCommandChange.bind(this)\n    this.handleRPCError = this.handleRPCError.bind(this)\n    this.selectCommand = this.selectCommand.bind(this)\n  }\n\n  handleCommandChange(event) {\n    let command = event.target.value\n    this.setState({\n      command: command\n    })\n  }\n\n  // Change tool to view on main page\n  selectCommand(eventKey) {\n    this.setState({\n      command: constants.SAMPLE_COMMANDS[eventKey],\n      activeCommandId: eventKey,\n      activeCommandName: constants.SAMPLE_COMMAND_NAMES[eventKey],\n    })\n  }\n\n  handleRPCError(error) {\n    this.setState({fetchingRPC: false})\n    alert(\"Error: see console\")\n    if (error.code) {\n      // IP blocked\n      if (error.code === 429) {\n        console.log(constants.RPC_LIMIT)\n      }\n      else {\n        console.log(\"RPC request failed: \"+error.message)\n      }\n    }\n    else {\n      console.log(\"RPC request failed: \"+error)\n    }\n  }\n\n  // Make RPC call\n  getRPC(event) {\n    try {\n      var command = JSON.parse(this.state.command)\n    }\n    catch(e) {\n      console.log(\"Could not parse json string\")\n      return\n    }\n\n    if (Object.keys(command).length > 0) {\n      this.setState({fetchingRPC: true})\n      this.postData(command)\n      .then((data) => {\n        this.setState({fetchingRPC: false})\n        this.writeOutput(data)\n      })\n      .catch(function(error) {\n        this.handleRPCError(error)\n      }.bind(this))\n    }\n  }\n\n  // Write result in output area\n  writeOutput(json) {\n    try {\n      this.setState({\n        output: JSON.stringify(json, null, 2)\n      })\n    }\n    catch(error) {\n      console.log(\"Bad JSON: \"+error)\n    }\n  }\n\n  // Post RPC data with timeout and catch errors\n  async postData(data = {}, server=constants.RPC_SERVER) {\n    let didTimeOut = false;\n\n    return new Promise(function(resolve, reject) {\n        const timeout = setTimeout(function() {\n            didTimeOut = true;\n            reject(new Error('Request timed out'));\n        }, RPC_TIMEOUT);\n\n        fetch(server, {\n          method: 'POST', // *GET, POST, PUT, DELETE, etc.\n          mode: 'cors', // no-cors, *cors, same-origin\n          cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n          credentials: 'same-origin', // include, *same-origin, omit\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Basic ' + Base64.encode(constants.RPC_CREDS)\n          },\n          redirect: 'follow', // manual, *follow, error\n          referrerPolicy: 'no-referrer', // no-referrer, *client\n          body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n        })\n        .then(function(response) {\n            // Clear the timeout as cleanup\n            clearTimeout(timeout);\n            if(!didTimeOut) {\n              if(response.status === 200) {\n                  resolve(response);\n              }\n              else {\n                throw new RPCError(response.status, resolve(response))\n              }\n            }\n        })\n        .catch(function(err) {\n            // Rejection already happened with setTimeout\n            if(didTimeOut) return;\n            // Reject with error\n            reject(err);\n        });\n    })\n    .then(async function(result) {\n        // Request success and no timeout\n        return await result.json()\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h3>RPC demo client for communicating with <a href=\"https://github.com/Joohansson/NanoRPCProxy\">NanoRPCProxy</a></h3>\n          <p>Send to a live Nano node using RPC json requests<br/>\n          See <a href=\"https://docs.nano.org/commands/rpc-protocol/\">documentation</a> for more commands<br/>\n          </p>\n          <DropdownButton\n            className=\"command-dropdown\"\n            title={this.state.activeCommandName}\n            key={this.state.activeCommandId}\n            id={`dropdown-basic-${this.state.activeCommandId}`}>\n            {constants.SAMPLE_COMMAND_NAMES.map(function(command, index){\n              return <Dropdown.Item eventKey={index} key={index} onSelect={this.selectCommand}>{command}</Dropdown.Item>;\n            }.bind(this))}\n          </DropdownButton>\n\n          <InputGroup size=\"sm\" className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"command\">\n                RPC Command\n              </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl id=\"command\" aria-describedby=\"command\" value={this.state.command} title=\"\" maxLength=\"200\" placeholder='RPC command' onChange={this.handleCommandChange} autoComplete=\"off\"/>\n          </InputGroup>\n\n          <InputGroup size=\"sm\" className=\"mb-3\">\n            <Button className=\"btn-medium\" variant=\"primary\" disabled={this.state.fetchingRPC} onClick={this.getRPC}>Node Request</Button>\n          </InputGroup>\n\n          <InputGroup size=\"sm\" className=\"mb-3\">\n            <FormControl id=\"output-area\" aria-describedby=\"output\" as=\"textarea\" rows=\"15\" placeholder=\"\" value={this.state.output} readOnly/>\n          </InputGroup>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// If sharing source code publically like on github, this file can be git ignored. The creds will be hidden inside the react app\nexport const RPC_SERVER = 'http://localhost:9950/proxy'\nexport const RPC_LIMIT = 'You have done too many RPC requests. Try again later.'\nexport const RPC_CREDS = 'user1:user1'\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}